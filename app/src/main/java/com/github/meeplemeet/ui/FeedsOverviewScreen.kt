/**
 * Feeds-Overview UI layer.
 *
 * Sections of this file were generated by ChatGPT-Copilot assistance.
 */
package com.github.meeplemeet.ui

import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Add
import androidx.compose.material.icons.outlined.ChatBubbleOutline
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.platform.testTag
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextOverflow
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.lifecycle.viewmodel.compose.viewModel
import com.github.meeplemeet.model.structures.Account
import com.github.meeplemeet.model.structures.Post
import com.github.meeplemeet.model.viewmodels.FirestoreViewModel
import com.github.meeplemeet.model.viewmodels.PostOverviewViewModel
import com.github.meeplemeet.ui.navigation.BottomNavigationMenu
import com.github.meeplemeet.ui.navigation.MeepleMeetScreen
import com.github.meeplemeet.ui.navigation.NavigationActions
import com.github.meeplemeet.ui.navigation.NavigationTestTags
import com.github.meeplemeet.ui.theme.AppColors
import com.github.meeplemeet.ui.theme.AppTheme
import com.github.meeplemeet.ui.theme.Elevation
import java.text.SimpleDateFormat
import java.util.*

/* ==========  CONSTANTS  ====================================================== */
/** Placeholder text shown when a post has no comments yet. */
private const val NO_COMMENTS_DEFAULT_TEXT = "(No comments yet)"

/** Placeholder text shown when the feed contains zero posts. */
private const val NO_POSTS_DEFAULT_TEXT = "No Posts yet"

/* ==========  PUBLIC API  ===================================================== */
/**
 * Root screen that displays a scrollable list of posts (the “feed”).
 *
 * Observes [PostOverviewViewModel.posts] and re-composes whenever the list changes. Posts are
 * sorted newest-first.
 *
 * @param postOverviewVM ViewModel that supplies the list of posts.
 * @param firestoreViewModel ViewModel used to resolve author names.
 * @param account Currently logged-in account.
 * @param navigation Actions for navigation events.
 * @param onClickAddPost Callback fired when the FAB is tapped.
 * @param onSelectPost Callback fired when a post card is tapped.
 */
@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun FeedsOverviewScreen(
    postOverviewVM: PostOverviewViewModel = viewModel(),
    firestoreViewModel: FirestoreViewModel = viewModel(),
    account: Account,
    navigation: NavigationActions,
    onClickAddPost: () -> Unit = {},
    onSelectPost: (Post) -> Unit = {},
) {

  LaunchedEffect(Unit) { postOverviewVM.getPosts() }
  val posts by postOverviewVM.posts.collectAsState()
  val postsSorted = remember(posts) { posts.sortedByDescending { it.timestamp } }

  Scaffold(
      floatingActionButton = {
        FloatingActionButton(
            onClick = onClickAddPost, modifier = Modifier.testTag("AddPostButton")) {
              Icon(Icons.Default.Add, contentDescription = "Create")
            }
      },
      topBar = {
        CenterAlignedTopAppBar(
            title = {
              Text(
                  text = MeepleMeetScreen.FeedsOverview.title,
                  style = MaterialTheme.typography.bodyMedium,
                  color = MaterialTheme.colorScheme.onPrimary,
                  modifier = Modifier.testTag(NavigationTestTags.SCREEN_TITLE))
            })
      },
      bottomBar = {
        BottomNavigationMenu(
            currentScreen = MeepleMeetScreen.FeedsOverview,
            onTabSelected = { screen -> navigation.navigateTo(screen) })
      }) { innerPadding ->
        if (postsSorted.isEmpty()) {
          Box(modifier = Modifier.fillMaxSize().padding(innerPadding)) { EmptyFeedListText() }
        } else {
          LazyColumn(
              modifier =
                  Modifier.fillMaxSize()
                      .background(MaterialTheme.colorScheme.background)
                      .padding(innerPadding),
              verticalArrangement = Arrangement.spacedBy(10.dp),
              contentPadding = PaddingValues(horizontal = 16.dp, vertical = 12.dp)) {
                items(postsSorted, key = { it.id }) { post ->
                  val lastComment = post.comments.maxByOrNull { it.timestamp }

                  val senderId = lastComment?.authorId ?: ""
                  val isMe = (senderId == account.uid)
                  val senderName by
                      produceState(
                          key1 = senderId, initialValue = if (isMe) MY_MSG_USERNAME else null) {
                            if (senderId.isNotBlank() && !isMe) {
                              firestoreViewModel.getOtherAccount(senderId) { acc ->
                                value = acc.name
                              }
                            }
                          }

                  val msgText = buildString {
                    if (lastComment == null) append(NO_COMMENTS_DEFAULT_TEXT)
                    else {
                      if (isMe) append("$MY_MSG_USERNAME: ")
                      else if (!senderName.isNullOrBlank()) append("$senderName: ")
                      append(lastComment.text)
                    }
                  }

                  val dateFormatted =
                      SimpleDateFormat("dd/MM/yyyy", Locale.getDefault())
                          .format(post.timestamp.toDate())

                  val authorName by
                      produceState<String?>(key1 = post.authorId, initialValue = null) {
                        firestoreViewModel.getOtherAccount(post.authorId) { acc ->
                          value = acc.name
                        }
                      }

                  FeedCard(
                      authorName = authorName ?: post.authorId,
                      postTitle = post.title,
                      lastMsg = msgText,
                      commentCount = post.comments.size,
                      date = dateFormatted,
                      firstTag = post.tags.firstOrNull(),
                      modifier = Modifier.fillMaxWidth().testTag("Post/${post.id}"),
                      onClick = { onSelectPost(post) })
                }
              }
        }
      }
}

/* ==========  EMPTY STATE  ==================================================== */
/** Displays a centred label when the feed contains no posts. */
@Composable
private fun EmptyFeedListText() {
  Box(
      modifier =
          Modifier.fillMaxSize().padding(24.dp).background(MaterialTheme.colorScheme.background),
      contentAlignment = Alignment.Center) {
        Text(
            text = NO_POSTS_DEFAULT_TEXT,
            style = MaterialTheme.typography.bodyMedium,
            color = MaterialTheme.colorScheme.onPrimary)
      }
}

/* ==========  FEED CARD  ====================================================== */
/**
 * Visual representation of a single post in the feed.
 *
 * Layout (top → bottom):
 * 1. Row(author avatar + author name)
 * 2. Post title (bold, single line)
 * 3. Last message (single line, ellipsised)
 * 4. Row(comment counter + date)
 *
 * A coloured pill in the top-right corner shows the first tag (max 4 chars, ellipsis if longer).
 * The whole card is clickable.
 *
 * @param authorName Display name of the post creator.
 * @param postTitle Title of the post.
 * @param lastMsg Text of the most recent comment (or fallback).
 * @param commentCount Total number of comments on the post.
 * @param date Post creation date formatted as dd/MM/yyyy.
 * @param firstTag First tag of the post (nullable). Shown in a pill.
 * @param modifier Optional [Modifier].
 * @param onClick Callback invoked when the card is tapped.
 */
@Composable
private fun FeedCard(
    authorName: String,
    postTitle: String,
    lastMsg: String,
    commentCount: Int,
    date: String,
    firstTag: String?,
    modifier: Modifier = Modifier,
    onClick: () -> Unit = {}
) {
  val shape = MaterialTheme.shapes.large

  Card(
      onClick = onClick,
      modifier = modifier,
      colors = CardDefaults.cardColors(containerColor = AppColors.secondary),
      shape = shape,
      elevation = CardDefaults.cardElevation(defaultElevation = Elevation.raised)) {
        Box(modifier = Modifier.fillMaxWidth()) {
          Column(modifier = Modifier.fillMaxWidth().padding(horizontal = 16.dp, vertical = 18.dp)) {
            /* author row */
            Row(
                verticalAlignment = Alignment.CenterVertically,
                horizontalArrangement = Arrangement.spacedBy(8.dp)) {
                  Box(modifier = Modifier.size(24.dp).clip(CircleShape).background(AppColors.focus))
                  Text(
                      text = authorName,
                      style = MaterialTheme.typography.labelMedium,
                      color = AppColors.textIconsFade)
                }

            Spacer(modifier = Modifier.height(4.dp))

            /* title */
            Text(
                text = postTitle,
                style = MaterialTheme.typography.titleMedium.copy(fontWeight = FontWeight.Bold),
                color = AppColors.textIcons,
                maxLines = 1)

            Spacer(modifier = Modifier.height(6.dp))

            /* last message */
            Text(
                text = lastMsg,
                style = MaterialTheme.typography.bodySmall,
                color = AppColors.textIconsFade,
                maxLines = 1)

            Spacer(modifier = Modifier.height(12.dp))

            /* bottom row */
            Row(
                modifier = Modifier.fillMaxWidth(),
                verticalAlignment = Alignment.CenterVertically) {
                  Row(verticalAlignment = Alignment.CenterVertically) {
                    Text(
                        text = commentCount.toString(),
                        style = MaterialTheme.typography.bodySmall,
                        color = AppColors.textIcons)
                    Spacer(modifier = Modifier.width(4.dp))
                    Icon(
                        imageVector = Icons.Outlined.ChatBubbleOutline,
                        contentDescription = "comment icon",
                        modifier = Modifier.size(16.dp),
                        tint = AppColors.textIconsFade)
                  }

                  Spacer(modifier = Modifier.weight(1f))

                  Text(
                      text = date,
                      style = MaterialTheme.typography.bodySmall,
                      color = AppColors.textIconsFade)
                }
          }

          /* tag pill */
          if (!firstTag.isNullOrBlank()) {
            Box(
                modifier =
                    Modifier.align(Alignment.TopEnd)
                        .padding(8.dp)
                        .height(24.dp)
                        .clip(MaterialTheme.shapes.large)
                        .background(AppColors.neutral)
                        .border(
                            width = 1.dp,
                            color = AppColors.divider,
                            shape = MaterialTheme.shapes.small)
                        .padding(horizontal = 8.dp, vertical = 2.dp),
                contentAlignment = Alignment.Center) {
                  Text(
                      text = firstTag,
                      style = MaterialTheme.typography.labelSmall,
                      color = AppColors.textIcons,
                      maxLines = 1,
                      softWrap = false,
                      overflow = TextOverflow.Ellipsis)
                }
          }
        }
      }
}

/* ==========  PREVIEWS  ======================================================= */
@Preview(showBackground = true, name = "Card – AppColors")
@Composable
private fun FeedCardPreview() {
  AppTheme {
    Column(modifier = Modifier.fillMaxWidth().padding(16.dp)) {
      FeedCard(
          authorName = "Alice",
          postTitle = "Tomorrow party !",
          lastMsg = "Be on time please",
          commentCount = 12,
          date = "31/10/2025",
          firstTag = "board-games",
          modifier = Modifier.fillMaxWidth())
    }
  }
}

@OptIn(ExperimentalMaterial3Api::class)
@Preview(showBackground = true, name = "Overview – scaffold mock")
@Composable
private fun FeedsOverviewPreview() {
  AppTheme {
    Scaffold(
        topBar = {
          CenterAlignedTopAppBar(
              title = {
                Text(
                    text = MeepleMeetScreen.FeedsOverview.name,
                    style = MaterialTheme.typography.bodyMedium,
                    color = MaterialTheme.colorScheme.onPrimary)
              })
        },
        bottomBar = {
          BottomNavigationMenu(
              currentScreen = MeepleMeetScreen.FeedsOverview, onTabSelected = { /* preview only */})
        }) { inner ->
          LazyColumn(
              modifier =
                  Modifier.fillMaxSize()
                      .background(MaterialTheme.colorScheme.background)
                      .padding(inner),
              verticalArrangement = Arrangement.spacedBy(10.dp),
              contentPadding = PaddingValues(horizontal = 16.dp, vertical = 12.dp)) {
                item {
                  FeedCard(
                      authorName = "Catan Crew",
                      postTitle = "Catan Crew",
                      lastMsg = "You: I’ll bring wheat 🍞",
                      commentCount = 0,
                      date = "31/10/2025",
                      firstTag = "board-games",
                      modifier = Modifier.fillMaxWidth())
                }
                item {
                  FeedCard(
                      authorName = "Alice",
                      postTitle = "Gloomhaven Sunday",
                      lastMsg = "Alice: Scenario 12 tonight? Need traps disarmed.",
                      commentCount = 3,
                      date = "30/10/2025",
                      firstTag = "rpg",
                      modifier = Modifier.fillMaxWidth())
                }
                item {
                  FeedCard(
                      authorName = "Ben",
                      postTitle = "Arkham Horror Night",
                      lastMsg = "Ben: Chaos bag updated. Don’t forget new weakness cards!",
                      commentCount = 1,
                      date = "29/10/2025",
                      firstTag = "horror",
                      modifier = Modifier.fillMaxWidth())
                }
                item {
                  FeedCard(
                      authorName = "System",
                      postTitle = "Ticket to Ride: Europe",
                      lastMsg = "(No messages yet)",
                      commentCount = 0,
                      date = "28/10/2025",
                      firstTag = null,
                      modifier = Modifier.fillMaxWidth())
                }
              }
        }
  }
}
