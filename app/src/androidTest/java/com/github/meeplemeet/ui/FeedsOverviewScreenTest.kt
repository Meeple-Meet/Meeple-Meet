/** Sections of this file were generated by ChatGPT. */
package com.github.meeplemeet.ui

import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.setValue
import androidx.compose.ui.test.*
import androidx.compose.ui.test.junit4.createComposeRule
import androidx.test.ext.junit.runners.AndroidJUnit4
import com.github.meeplemeet.model.repositories.FirestorePostRepository
import com.github.meeplemeet.model.repositories.FirestoreRepository
import com.github.meeplemeet.model.structures.Account
import com.github.meeplemeet.model.structures.Post
import com.github.meeplemeet.model.viewmodels.FirestoreViewModel
import com.github.meeplemeet.model.viewmodels.PostOverviewViewModel
import com.github.meeplemeet.ui.navigation.MeepleMeetScreen
import com.github.meeplemeet.ui.navigation.NavigationActions
import com.github.meeplemeet.ui.navigation.NavigationTestTags
import com.github.meeplemeet.ui.theme.AppTheme
import com.github.meeplemeet.ui.theme.ThemeMode
import com.github.meeplemeet.utils.FirestoreTests
import io.mockk.mockk
import kotlinx.coroutines.runBlocking
import org.junit.*
import org.junit.runner.RunWith

@RunWith(AndroidJUnit4::class)
class FeedsOverviewScreenTest : FirestoreTests() {

  @get:Rule val compose = createComposeRule()
  private val nav: NavigationActions = mockk(relaxed = true)

  /* repos & VMs */
  private lateinit var postRepo: FirestorePostRepository
  private lateinit var accountRepo: FirestoreRepository
  private lateinit var postVm: PostOverviewViewModel
  private lateinit var firestoreVm: FirestoreViewModel

  private lateinit var me: Account
  private lateinit var alice: Account
  private lateinit var bob: Account
  private val createdPosts = mutableListOf<Post>()
  private val createdAccounts = mutableListOf<Account>()
  private val report = linkedMapOf<String, Boolean>()

  /* -------------- semantic helpers -------------- */
  private fun screenTitle() = compose.onNodeWithTag(NavigationTestTags.SCREEN_TITLE)

  private fun addPostFab() = compose.onNodeWithTag(FeedsOverviewTestTags.ADD_POST_BUTTON)

  private fun postCard(postId: String) =
      compose.onNodeWithTag(FeedsOverviewTestTags.POST_CARD_PREFIX + postId)

  /* dynamic state for ONE setContent */
  private var theme by mutableStateOf(ThemeMode.LIGHT)
  private var fabClicked by mutableStateOf(false)
  private var clickedPost: Post? by mutableStateOf(null)

  /* ---------------------------------------------- */

  @Before
  fun setup() = runBlocking {
    postRepo = FirestorePostRepository()
    accountRepo = FirestoreRepository()
    postVm = PostOverviewViewModel(postRepo)
    firestoreVm = FirestoreViewModel(accountRepo)

    me = accountRepo.createAccount("meUID", "Me", "me@test.com", null)
    createdAccounts += me

    alice = accountRepo.createAccount("aliceUID", "Alice", "alice@test.com", null)
    bob = accountRepo.createAccount("bobUID", "Bob", "bob@test.com", null)
    createdAccounts += alice
    createdAccounts += bob
  }

  /* ----------------------------------------------------------
   *  1  FAT TEST  –  many checkpoints for higher coverage
   * ---------------------------------------------------------- */
  @OptIn(ExperimentalTestApi::class)
  @Test
  fun full_smoke_all_cases() = runBlocking {
      compose.setContent {
          AppTheme(themeMode = theme) {
              FeedsOverviewScreen(
                  postOverviewVM = postVm,
                  firestoreViewModel = firestoreVm,
                  account = me,
                  navigation = nav,
                  onClickAddPost = { fabClicked = true },
                  onSelectPost = { clickedPost = it })
          }
      }

    /* 1  EMPTY STATE  ------------------------------------------------------ */
    checkpoint("Empty-state message shown") {
      compose.waitUntilAtLeastOneExists(hasText("No Posts yet"), 3_000)
    }

    /* 2  SEED POSTS  ------------------------------------------------------- */
    // post without comments → comment count = 0
    createdPosts +=
        postRepo.createPost(
            title = "No-comment post",
            content = "Empty post",
            authorId = alice.uid,
            tags = listOf("short"))

    // post with long tag → ellipsis
    createdPosts +=
        postRepo.createPost(
            title = "Long-tag post",
            content = "Tag will be truncated",
            authorId = bob.uid,
            tags = listOf("very-long-tag-name"))

    // normal post with comments
    var normal =
        postRepo.createPost(
            title = "Normal post",
            content = "Has comments",
            authorId = me.uid,
            tags = listOf("board-games", "strategy"))
    postRepo.addComment(normal.id, "First!", me.uid, parentId = normal.id)
    createdPosts += normal
    normal = postRepo.getPost(normal.id)
    val first = createdPosts.first()
    postVm.getPosts()

    /* 3  LIGHT THEME  ------------------------------------------------------ */
    theme = ThemeMode.LIGHT
    compose.awaitIdle()

    checkpoint("Light-theme screen title") {
      compose.waitUntilAtLeastOneExists(hasTestTag("Post/${first.id}"), 5_000)
      screenTitle().assertTextEquals(MeepleMeetScreen.FeedsOverview.title)
    }

    checkpoint("Post without comments shows 0") {
      postCard(first.id).assertExists()
      // card contains the text "0" somewhere inside it
      postCard(first.id).assert(hasText("0"))
    }

    /* 4  CARD CLICK  ------------------------------------------------------- */
    clickedPost = null
    compose.awaitIdle()
    postCard(normal.id).performClick()

    checkpoint("Card click captured") { assert(clickedPost?.id == normal.id) }

    /* 5  FAB CLICK  -------------------------------------------------------- */
    fabClicked = false
    compose.awaitIdle()
    addPostFab().performClick()

    checkpoint("FAB click captured") { assert(fabClicked) }

    /* 6  THEME SWITCH  ----------------------------------------------------- */
    theme = ThemeMode.DARK
    compose.awaitIdle()

    checkpoint("Dark theme still shows cards") { postCard(first.id).assertExists() }

    /* ---------------- one-line report ------------------------------------ */
    val failed = report.filterValues { !it }.keys
    println(
        "Smoke: ${report.size - failed.size}/${report.size} OK" +
            (if (failed.isNotEmpty()) " → $failed" else ""))
    Assert.assertTrue("Failures: $failed", failed.isEmpty())
  }

  @After
  fun tearDown() = runBlocking {
    createdPosts.forEach { runCatching { postRepo.deletePost(it.id) } }
    createdAccounts.forEach { runCatching { accountRepo.deleteAccount(it.uid) } }
  }

  /* ---------------- helper ---------------- */
  private inline fun checkpoint(name: String, crossinline block: () -> Unit) {
    runCatching { block() }.onSuccess { report[name] = true }.onFailure { report[name] = false }
  }
}
